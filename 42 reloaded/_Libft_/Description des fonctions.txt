Voici les descriptions, valeurs de retour et prototypes des fonctions demandées, classées des plus simples aux plus complexes :

isalpha

Description: Vérifie si un caractère est une lettre alphabétique.
Valeur de retour: Non nul si le caractère est une lettre, 0 sinon.
Prototype: int isalpha(int c);

isdigit

Description: Vérifie si un caractère est un chiffre.
Valeur de retour: Non nul si le caractère est un chiffre, 0 sinon.
Prototype: int isdigit(int c);

isalnum

Description: Vérifie si un caractère est alphanumérique.
Valeur de retour: Non nul si le caractère est alphanumérique, 0 sinon.
Prototype: int isalnum(int c);

isascii

Description: Vérifie si un caractère est un ASCII.
Valeur de retour: Non nul si le caractère est un ASCII, 0 sinon.
Prototype: int isascii(int c);

isprint

Description: Vérifie si un caractère est imprimable.
Valeur de retour: Non nul si le caractère est imprimable, 0 sinon.
Prototype: int isprint(int c);

toupper

Description: Convertit une lettre minuscule en majuscule.
Valeur de retour: La lettre majuscule correspondante, ou l’original si non applicable.
Prototype: int toupper(int c);

tolower

Description: Convertit une lettre majuscule en minuscule.
Valeur de retour: La lettre minuscule correspondante, ou l’original si non applicable.
Prototype: int tolower(int c);

strlen

Description: Calcule la longueur d’une chaîne de caractères.
Valeur de retour: Le nombre de caractères dans la chaîne.
Prototype: size_t strlen(const char *s);

memset

Description: Remplit une zone mémoire avec une valeur spécifique.
Valeur de retour: Un pointeur vers la zone mémoire remplie.
Prototype: void *memset(void *s, int c, size_t n);

bzero

Description: Met à zéro (remplit de 0) une zone mémoire.
Valeur de retour: Aucune.
Prototype: void bzero(void *s, size_t n);

memcpy

Description: Copie une zone mémoire vers une autre.
Valeur de retour: Un pointeur vers la destination.
Prototype: void *memcpy(void *dest, const void *src, size_t n);

memmove

Description: Déplace une zone mémoire vers une autre, gérant le chevauchement.
Valeur de retour: Un pointeur vers la destination.
Prototype: void *memmove(void *dest, const void *src, size_t n);

strchr

Description: Trouve la première occurrence d'un caractère dans une chaîne.
Valeur de retour: Un pointeur vers la première occurrence, ou NULL.
Prototype: char *strchr(const char *s, int c);

strrchr

Description: Trouve la dernière occurrence d'un caractère dans une chaîne.
Valeur de retour: Un pointeur vers la dernière occurrence, ou NULL.
Prototype: char *strrchr(const char *s, int c);

strncmp

Description: Compare les n premiers caractères de deux chaînes.
Valeur de retour: Négatif, zéro, ou positif selon la comparaison.
Prototype: int strncmp(const char *s1, const char *s2, size_t n);

memchr

Description: Trouve la première occurrence d'un caractère dans une zone mémoire.
Valeur de retour: Un pointeur vers la première occurrence, ou NULL.
Prototype: void *memchr(const void *s, int c, size_t n);

memcmp

Description: Compare deux zones mémoire.
Valeur de retour: Négatif, zéro, ou positif selon la comparaison.
Prototype: int memcmp(const void *s1, const void *s2, size_t n);

strnstr

Description: Trouve la première occurrence d'une sous-chaîne dans les n premiers caractères d'une chaîne.
Valeur de retour: Un pointeur vers la sous-chaîne, ou NULL.
Prototype: char *strnstr(const char *haystack, const char *needle, size_t len);

atoi

Description: Convertit une chaîne en entier.
Valeur de retour: L'entier converti.
Prototype: int atoi(const char *str);

strlcpy

Description: Copie une chaîne avec une taille maximale spécifiée.
Valeur de retour: La longueur de la chaîne source.
Prototype: size_t strlcpy(char *dst, const char *src, size_t dstsize);

strlcat

Description: Concatène des chaînes avec une taille maximale spécifiée.
Valeur de retour: La longueur totale de la chaîne qu'elle a tenté de créer.
Prototype: size_t strlcat(char *dst, const char *src, size_t dstsize);

calloc

Description: Alloue de la mémoire pour un tableau de n éléments initialisés à zéro.
Valeur de retour: Un pointeur vers la mémoire allouée.
Prototype: void *calloc(size_t nmemb, size_t size);

strdup

Description: Duplique une chaîne en allouant de la mémoire.
Valeur de retour: Un pointeur vers la nouvelle chaîne.
Prototype: char *strdup(const char *s);